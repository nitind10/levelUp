//extra class 22 feb 2021
public class questions4 {
    public static class TreeNode{
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        TreeNode(int val){
            this.val = val;
        }
    }

    //968 ===============================================================================
    /*  -1 : cam reqd
         0 : i am camera
         1 : i'm covered
    */
    int cam = 0;
    public int calCamera(TreeNode node){
        if(node == null)
            return 1;
        
        int la = calCamera(node.left);
        int ra = calCamera(node.right);
        
        if(la == -1 || ra == -1){
            cam++;
            return 0;
        }
        if(la == 0 || ra == 0)
            return 1;
        
        return -1;
    }
    public int minCameraCover(TreeNode root) {        
        int ans = calCamera(root);
        if(ans == -1)
            cam++;
        return cam;
    }

    //337 =======================================================================================
    //arr[0] = max amount generated by not robbing this node
    //arr[1] = max amount generated by robbing this node
    
    int[] helper(TreeNode node){
        if(node == null){
            int[] base = new int[2];
            base[0] = 0; base[1] = 0;
            return base;
        }
        if(node.left == null && node.right == null){
            int[] base = new int[2];
            base[0] = 0; base[1] = node.val;
            return base;
        }
        
        int[] lAns = helper(node.left);
        int[] rAns = helper(node.right);
        
        int[] myAns = new int[2];
        myAns[0] = Math.max(lAns[0], lAns[1]) + Math.max(rAns[0], rAns[1]);
        myAns[1] = node.val + lAns[0] + rAns[0];
        
        return myAns;
    }
    public int rob(TreeNode root) {
        int[] ans = helper(root);
        return Math.max(ans[0], ans[1]);
    }

    //230 ==========================================================================
    //do using bst iterator in logN space and morris in constant space for more geniune way
    public void helper(TreeNode node, int k, int[] K){
        if(node == null)
            return;
        
        helper(node.left, k, K);
        
        K[0]++;
        if(K[0] == k)
            K[1] = node.val;
        
        helper(node.right, k, K);
        
    }
    public int kthSmallest(TreeNode root, int k) {
        int[] K = new int[2];
        K[0] = 0;
        helper(root, k, K);
        return K[1];
    }

    //1372 =================================================================================
    //arr[0] = left oriented max path
    //arr[1] = right oriented max path
    public int[] helper(TreeNode node, int[] path){
        if(node == null){
            int[] base = new int[2];
            base[0] = -1; base[1] = -1;
            return base;
        }
        
        int[] lAns = helper(node.left, path);
        int[] rAns = helper(node.right, path);
        
        int[] myAns = new int[2];
        myAns[0] = lAns[1] + 1;
        myAns[1] = rAns[0] + 1;
        
        path[0] = Math.max(path[0], Math.max(myAns[0], myAns[1]));
        return myAns;
    }
    public int longestZigZag(TreeNode root) {
        int[] path = new int[1];
        path[0] = -(int)1e9;
        int[] ans = helper(root, path);
        return path[0];
    }

    public static void main(String[] args){

    }
}
